#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt of immortalwrt-mt7986-ax6000 [openwrt-21.02]

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
#  schedule:
#    - cron: 0 16 * * *

env:
  # 源码仓库地址
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x.git
  # 源码分支
  REPO_BRANCH: openwrt-21.02
  # 自定义feeds.conf.default文件名
  FEEDS_CONF: feeds.conf.default
  # 自定义.config文件名
  CONFIG_FILE: hanwckf/.config
  # 自定义diy-part1.sh文件名
  DIY_P1_SH: hanwckf/diy-part1.sh
  # 自定义diy-part2.sh文件名
  DIY_P2_SH: hanwckf/diy-part2.sh
  SSH_ACTIONS: false
  # 上传 bin 目录。即包含所有 ipk 文件和固件的目录。默认false
  UPLOAD_BIN_DIR: false
  # 上传固件目录。默认true
  UPLOAD_FIRMWARE: false
  # 上传固件到奶牛快传。默认false
  UPLOAD_COWTRANSFER: false
  # 上传固件到 WeTransfer 。默认false
  UPLOAD_WETRANSFER: false
  # 上传固件到 releases 。默认false
  UPLOAD_RELEASE: false
  # 时区设置
  TZ: Asia/Shanghai
  OPENWRT_NAME: OpenWrt

jobs:
  Build:
    runs-on: ubuntu-20.04
    timeout-minutes: 360 # 6小时，自己加时间

    steps:
    - name: 检查项目分支
      uses: actions/checkout@main

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 下载固件源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH immortalwrt-mt798x
        echo -e "[INFO] GITHUB_WORKSPACE = $(GITHUB_WORKSPACE)"
        ln -sf /workdir/immortalwrt-mt798x $GITHUB_WORKSPACE/immortalwrt-mt798x

    - name: 加载feeds.conf.default & DIY_P1_SH
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF immortalwrt-mt798x/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd immortalwrt-mt798x
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 feeds
      run: |
        cd immortalwrt-mt798x 
        ./scripts/feeds update -a

    - name: 安装 feeds
      run: |
      cd immortalwrt-mt798x
      ./scripts/feeds install -a

    - name: 加载config & DIY_P2_SH
      run: |
        [ -e files ] && mv files immortalwrt-mt798x/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE immortalwrt-mt798x/.config
        chmod +x $DIY_P2_SH
        cd immortalwrt-mt798x
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载安装包
      id: package
      run: |
        cd immortalwrt-mt798x
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd immortalwrt-mt798x
        echo -e "[INFO] $(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        # echo "::set-output name=status::success"        
        
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        echo -e "[INFO] DEVICE_NAME = $(DEVICE_NAME)"
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*TARGET_.*_(.*)_DEVICE_.*=y/\1/' > TARGET_NAME
        echo -e "[INFO] TARGET_NAME = $(TARGET_NAME)"
        [ -s TARGET_NAME ] && echo "TARGET_NAME=$(cat TARGET_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV	
        echo "status=success" >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_ENV
        
    - name: 查看磁盘使用情况
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: immortalwrt-mt798x_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: immortalwrt-mt798x/bin

    - name: 整理文件并重命名
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd immortalwrt-mt798x/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        # echo "::set-output name=status::success"
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: immortalwrt-mt798x_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        # echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"
        echo "{url}={$(cat cowtransfer.log | grep https | cut -f3 -d" ")}" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        # echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
        echo "{url}={$(cat wetransfer.log | grep https | cut -f3 -d" ")}" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        # echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        echo "{release_tag}={$(date +"%Y.%m.%d-%H%M")}" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        # echo "::set-output name=status::success"
        echo "{status}={success}" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
